###############
# DEFINITIONS #
###############

# Bool
# - tt x y -->* x.
# - ff x y -->* y.
def tt  = K;
def ff  = S K;

# Numeral
# - (inc n) f x -->* f (n f x).
# - _0 f x -->* x.
# - _n f x -->* f (f (...(f x)...)).
def inc = S (S (K S) K);
def _0  = S K;
def _1  = inc _0;
def _2  = inc _1;
def _3  = inc _2;

##########
# PART 2 #
##########
# TASK: Implement the following functions.

# BEGIN_YOUR_CODE
def c1     = S (S (K K) (S (K S) (S (K K) I))) (K (S (S (K S) (S (K K) I)) (K I)));
def c2     = S ((c1 S (c1 K (c1 S (S (c1 c1 I) (K I)))))) (K (c1 K I));
def swap   = c1 (c2 I) I;
def or     = I;
def and    = I;
def not    = c2 (c1 c1 (c1 c2 (c2 (c1 c1 I) I))) I;
def is_odd = I;
# END_YOUR_CODE

#not z x y = z y x
#or z w x y = z w z x y

#########
# TESTS #
#########
# NOTE: Expected outputs are given as comments on each line.

section_or; # This symbol will just be printed, so we can keep track of the output.
(or tt tt) x y;  # x
(or tt ff) x y;  # x
(or ff tt) x y;  # x
(or ff ff) x y;  # y
tt x (tt x y);
tt x (ff x y);
ff x (tt x y);
ff x (ff x y);
## or z w x y  =  z x (w x y)

section_and;
(and tt tt) x y;  # x
(and tt ff) x y;  # y
(and ff tt) x y;  # y
(and ff ff) x y;  # y
tt (tt x y) y;
tt (ff x y) y;
ff (tt x y) y;
ff (ff x y) y;
## and z w x y = z (w x y) y

section_not;
(not tt) x y;  # y
(not ff) x y;  # x
## not z x y = z y x
not;

section_is_odd;
(is_odd _0) x y;  # y
(is_odd _1) x y;  # x
(is_odd _2) x y;  # y
(is_odd _3) x y;  # x

section_swap;
(swap) x y;  # (y x)
(swap) y x;  # (x y)
